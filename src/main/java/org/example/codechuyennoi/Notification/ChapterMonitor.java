package org.example.codechuyennoi.Notification;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.BlockingQueue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChapterMonitor implements Runnable {
    private final BlockingQueue<Integer> chapterQueue;
    private volatile int lastKnownChapter;
    private final String baseUrl;
    private static final Logger logger = LoggerFactory.getLogger(ChapterMonitor.class);
    private final File lastChapterFile;
    private final String storyName;

    public ChapterMonitor(BlockingQueue<Integer> chapterQueue, String baseUrl, String lastChapterFilePath, String storyName) {
        this.chapterQueue = chapterQueue;
        this.baseUrl = baseUrl;
        String lastChapterPath = "luutrutruyen/" + storyName + "/lastChapter.txt";
        this.lastChapterFile = new File(lastChapterPath);
        this.storyName = storyName;
        this.lastKnownChapter = loadLastKnownChapter();
        logger.info("Kh·ªüi ƒë·ªông ChapterMonitor v·ªõi lastKnownChapter = {}", lastKnownChapter);
    }

    @Override
    public void run() {
        while (!Thread.currentThread().isInterrupted()) {
            try {
                String now = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
                logger.info("üïì [{}] ƒêang ki·ªÉm tra ch∆∞∆°ng m·ªõi t·∫°i: {}", now, baseUrl);

                int newestChapter = checkNewestChapterFromSource();
                if (newestChapter == -1) {
                    logger.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ch∆∞∆°ng m·ªõi (c√≥ th·ªÉ l·ªói m·∫°ng ho·∫∑c selector). Gi·ªØ lastKnownChapter: {}", lastKnownChapter);
                } else if (newestChapter > lastKnownChapter) {
                    logger.info("üì¢ Ph√°t hi·ªán ch∆∞∆°ng m·ªõi: {} (l·ªõn h∆°n lastKnownChapter {})", newestChapter, lastKnownChapter);

                    for (int ch = lastKnownChapter + 1; ch <= newestChapter; ch++) {
                        if (!chapterFileExists(ch)) {
                            chapterQueue.put(ch);
                            logger.info("üì• Th√™m ch∆∞∆°ng m·ªõi v√†o h√†ng ƒë·ª£i: {}", ch);
                        } else {
                            logger.info("Producer: ch∆∞∆°ng {} ƒë√£ c√≥ file, b·ªè qua.", ch);
                        }
                    }
                    updateLastKnownChapter(newestChapter);

                } else {
                    logger.info("‚úÖ Kh√¥ng c√≥ ch∆∞∆°ng m·ªõi. lastKnownChapter v·∫´n l√† {}", lastKnownChapter);
                    // üÜï Ki·ªÉm tra l·∫°i 5 ch∆∞∆°ng g·∫ßn nh·∫•t ƒë·ªÅ ph√≤ng b·ªã m·∫•t file
                    int startCheck = Math.max(lastKnownChapter - 5 + 1, 1);
                    for (int ch = startCheck; ch <= lastKnownChapter; ch++) {
                        if (!chapterFileExists(ch)) {
                            chapterQueue.put(ch);
                            logger.info("‚ôªÔ∏è File ch∆∞∆°ng {} b·ªã thi·∫øu. ƒê√£ ƒë∆∞a l·∫°i v√†o h√†ng ƒë·ª£i ƒë·ªÉ x·ª≠ l√Ω l·∫°i.", ch);
                        }
                    }
                }

                Thread.sleep(5 * 60 * 1000); // ng·ªß 5 ph√∫t
            } catch (InterruptedException e) {
                logger.info("ChapterMonitor b·ªã d·ª´ng b·ªüi interrupt.");
                Thread.currentThread().interrupt();
            } catch (Exception e) {
                logger.error("‚ùå L·ªói khi ki·ªÉm tra ch∆∞∆°ng m·ªõi:", e);
            }
        }
    }

    private int checkNewestChapterFromSource() {
        try {
            Document doc = Jsoup.connect(baseUrl)
                    .userAgent("Mozilla/5.0")
                    .timeout(10_000)
                    .get();

            Elements chapterLinks = doc.select("a[href*=/chuong-]");
            if (chapterLinks.isEmpty()) {
                logger.warn("Kh√¥ng t√¨m th·∫•y link ch∆∞∆°ng n√†o t·∫°i ngu·ªìn: {}", baseUrl);
                return -1;
            }

            return chapterLinks.stream()
                    .map(link -> extractChapterNumber(link.attr("href")))
                    .filter(num -> num > 0)
                    .max(Integer::compare)
                    .orElse(-1);

        } catch (IOException e) {
            logger.error("L·ªói khi k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω trang ngu·ªìn: {}", baseUrl, e);
            return -1;
        }
    }

    private int extractChapterNumber(String href) {
        try {
            Pattern pattern = Pattern.compile("chuong-(\\d+)", Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(href);
            if (matcher.find()) {
                return Integer.parseInt(matcher.group(1));
            }
        } catch (Exception e) {
            logger.error("L·ªói khi tr√≠ch xu·∫•t s·ªë ch∆∞∆°ng t·ª´ href: {}", href, e);
        }
        return -1;
    }

    private int loadLastKnownChapter() {
        if (!lastChapterFile.exists()) {
            logger.info("File l∆∞u lastKnownChapter kh√¥ng t·ªìn t·∫°i, b·∫Øt ƒë·∫ßu t·ª´ 0.");
            return 0;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(lastChapterFile))) {
            String line = reader.readLine();
            if (line != null) {
                int chapter = Integer.parseInt(line.trim());
                logger.info("ƒê√£ ƒë·ªçc lastKnownChapter t·ª´ file: {}", chapter);
                return chapter;
            }
        } catch (Exception e) {
            logger.error("L·ªói khi ƒë·ªçc lastKnownChapter t·ª´ file:", e);
        }
        return 0;
    }

    private void updateLastKnownChapter(int newChapter) {
        logger.info("C·∫≠p nh·∫≠t lastKnownChapter: {} -> {}", lastKnownChapter, newChapter);
        lastKnownChapter = newChapter;
        saveLastKnownChapter(newChapter);
    }

    private void saveLastKnownChapter(int chapter) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(lastChapterFile, false))) {
            writer.write(String.valueOf(chapter));
            logger.info("ƒê√£ l∆∞u lastKnownChapter v√†o file: {}", chapter);
        } catch (IOException e) {
            logger.error("L·ªói khi l∆∞u lastKnownChapter v√†o file:", e);
        }
    }

    private boolean chapterFileExists(int chapter) {
        String dirPath = "luutrutruyen/" + storyName;
        File dir = new File(dirPath);
        if (!dir.exists()) {
            if (!dir.mkdirs()) {
                logger.error("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: {}", dirPath);
            }
        }
        String filePath = dirPath + "/chuong-" + chapter + ".txt";
        File chapterFile = new File(filePath);
        boolean exists = chapterFile.exists() && chapterFile.length() > 0;
        logger.debug("Ki·ªÉm tra ch∆∞∆°ng {}: filePath={}, t·ªìn t·∫°i v√† kh√¥ng r·ªóng = {}", chapter, filePath, exists);
        return exists;
    }
}
