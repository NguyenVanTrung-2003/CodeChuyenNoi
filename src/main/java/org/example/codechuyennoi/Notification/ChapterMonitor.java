package org.example.codechuyennoi.Notification;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.BlockingQueue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * ChapterMonitor l√† m·ªôt l·ªõp theo d√µi ch∆∞∆°ng m·ªõi t·ª´ m·ªôt trang web truy·ªán.
 * Khi ph√°t hi·ªán ch∆∞∆°ng m·ªõi, n√≥ th√™m s·ªë ch∆∞∆°ng v√†o h√†ng ƒë·ª£i ƒë·ªÉ x·ª≠ l√Ω ti·∫øp.
 */
public class ChapterMonitor implements Runnable {
    private final BlockingQueue<Integer> chapterQueue; // H√†ng ƒë·ª£i ƒë·ªÉ ƒë∆∞a ch∆∞∆°ng m·ªõi v√†o x·ª≠ l√Ω
    private volatile int lastKnownChapter; // Ch∆∞∆°ng cu·ªëi c√πng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    private final String baseUrl; // ƒê∆∞·ªùng d·∫´n ƒë·∫øn danh s√°ch ch∆∞∆°ng c·ªßa truy·ªán
    private static final Logger logger = LoggerFactory.getLogger(ChapterMonitor.class);
    private final File lastChapterFile; // File l∆∞u ch∆∞∆°ng cu·ªëi ƒë√£ x·ª≠ l√Ω
    private final String storyName; // T√™n truy·ªán (d√πng ƒë·ªÉ t·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ ri√™ng)

    /**
     * Constructor: Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng ChapterMonitor
     * @param chapterQueue H√†ng ƒë·ª£i ƒë·ªÉ ch·ª©a ch∆∞∆°ng m·ªõi
     * @param baseUrl ƒê∆∞·ªùng d·∫´n ƒë·∫øn danh s√°ch ch∆∞∆°ng
     * @param lastChapterFilePath Kh√¥ng d√πng n·ªØa, gi·ªØ cho t∆∞∆°ng th√≠ch
     * @param storyName T√™n truy·ªán (d√πng l√†m t√™n th∆∞ m·ª•c)
     */
    public ChapterMonitor(BlockingQueue<Integer> chapterQueue, String baseUrl, String lastChapterFilePath, String storyName) {
        this.chapterQueue = chapterQueue;
        this.baseUrl = baseUrl;
        this.storyName = storyName;
        String lastChapterPath = "luutrutruyen/" + storyName + "/lastChapter.txt"; // T·∫°o ƒë∆∞·ªùng d·∫´n file l∆∞u ch∆∞∆°ng cu·ªëi
        this.lastChapterFile = new File(lastChapterPath);
        this.lastKnownChapter = loadLastKnownChapter(); // ƒê·ªçc ch∆∞∆°ng cu·ªëi t·ª´ file (n·∫øu c√≥)
        logger.info("Kh·ªüi ƒë·ªông ChapterMonitor v·ªõi lastKnownChapter = {}", lastKnownChapter);
    }

    /**
     * Ph∆∞∆°ng th·ª©c ch·∫°y khi thread ƒë∆∞·ª£c kh·ªüi ƒë·ªông
     * Theo d√µi ch∆∞∆°ng m·ªõi ƒë·ªãnh k·ª≥ m·ªói 5 ph√∫t
     */
    @Override
    public void run() {
        while (!Thread.currentThread().isInterrupted()) {
            try {
                String now = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));
                logger.info("üïì [{}] ƒêang ki·ªÉm tra ch∆∞∆°ng m·ªõi t·∫°i: {}", now, baseUrl);

                int newestChapter = checkNewestChapterFromSource(); // Ki·ªÉm tra ch∆∞∆°ng m·ªõi nh·∫•t t·ª´ trang web

                if (newestChapter == -1) {
                    handleErrorFetchingChapter(); // Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu (l·ªói m·∫°ng, selector...)
                } else if (newestChapter > lastKnownChapter) {
                    handleNewChaptersFound(newestChapter); // Ph√°t hi·ªán c√≥ ch∆∞∆°ng m·ªõi
                } else {
                    handleNoNewChapters(); // Kh√¥ng c√≥ ch∆∞∆°ng m·ªõi, ki·ªÉm tra ch∆∞∆°ng b·ªã thi·∫øu
                }

                Thread.sleep(15 * 60 * 1000); // Ng·ªß 5 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra ti·∫øp
            } catch (InterruptedException e) {
                logger.info("ChapterMonitor b·ªã d·ª´ng b·ªüi interrupt.");
                Thread.currentThread().interrupt(); // ƒê·∫£m b·∫£o d·ª´ng ƒë√∫ng c√°ch
            } catch (Exception e) {
                logger.error("‚ùå L·ªói khi ki·ªÉm tra ch∆∞∆°ng m·ªõi:", e);
            }
        }
    }

    /**
     * X·ª≠ l√Ω khi kh√¥ng th·ªÉ l·∫•y ch∆∞∆°ng m·ªõi (do l·ªói m·∫°ng, l·ªói selector,...)
     */
    private void handleErrorFetchingChapter() {
        logger.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ch∆∞∆°ng m·ªõi (c√≥ th·ªÉ l·ªói m·∫°ng ho·∫∑c selector). Gi·ªØ lastKnownChapter: {}", lastKnownChapter);
    }

    /**
     * X·ª≠ l√Ω khi ph√°t hi·ªán ch∆∞∆°ng m·ªõi so v·ªõi lastKnownChapter
     */
    private void handleNewChaptersFound(int newestChapter) throws InterruptedException {
        logger.info("üì¢ Ph√°t hi·ªán ch∆∞∆°ng m·ªõi: {} (l·ªõn h∆°n lastKnownChapter {})", newestChapter, lastKnownChapter);

        for (int ch = lastKnownChapter + 1; ch <= newestChapter; ch++) {
            if (!chapterFileExists(ch)) { // N·∫øu file ch∆∞∆°ng ch∆∞a t·ªìn t·∫°i
                chapterQueue.put(ch); // ƒê∆∞a v√†o h√†ng ƒë·ª£i x·ª≠ l√Ω
                logger.info("üì• Th√™m ch∆∞∆°ng m·ªõi v√†o h√†ng ƒë·ª£i: {}", ch);
            } else {
                logger.info("Producer: ch∆∞∆°ng {} ƒë√£ c√≥ file, b·ªè qua.", ch);
            }
        }
        updateLastKnownChapter(newestChapter); // C·∫≠p nh·∫≠t lastKnownChapter
    }

    /**
     * X·ª≠ l√Ω khi kh√¥ng c√≥ ch∆∞∆°ng m·ªõi: ki·ªÉm tra xem c√≥ ch∆∞∆°ng c≈© n√†o b·ªã m·∫•t file kh√¥ng
     */
    private void handleNoNewChapters() throws InterruptedException {
        logger.info("‚úÖ Kh√¥ng c√≥ ch∆∞∆°ng m·ªõi. lastKnownChapter v·∫´n l√† {}", lastKnownChapter);

        int startCheck = Math.max(lastKnownChapter - 5 + 1, 1); // Ki·ªÉm tra 5 ch∆∞∆°ng g·∫ßn nh·∫•t
        boolean updated = false;

        for (int ch = startCheck; ch <= lastKnownChapter; ch++) {
            if (!chapterFileExists(ch)) { // N·∫øu ch∆∞∆°ng b·ªã m·∫•t file
                chapterQueue.put(ch); // ƒê∆∞a l·∫°i v√†o h√†ng ƒë·ª£i
                logger.info("‚ôªÔ∏è File ch∆∞∆°ng {} b·ªã thi·∫øu. ƒê√£ ƒë∆∞a l·∫°i v√†o h√†ng ƒë·ª£i ƒë·ªÉ x·ª≠ l√Ω l·∫°i.", ch);
            } else {
                if (ch == lastKnownChapter && !updated) {
                    updateLastKnownChapter(ch); // C·∫≠p nh·∫≠t l·∫°i n·∫øu c·∫ßn
                    updated = true;
                }
            }
        }
    }

    /**
     * K·∫øt n·ªëi t·ªõi trang web v√† l·∫•y s·ªë ch∆∞∆°ng m·ªõi nh·∫•t
     */
    private int checkNewestChapterFromSource() {
        try {
            Document doc = Jsoup.connect(baseUrl)
                    .userAgent("Mozilla/5.0")
                    .timeout(10_000)
                    .get(); // T·∫£i trang web

            Elements chapterLinks = doc.select("a[href*=/chuong-]"); // Ch·ªçn c√°c th·∫ª a ch·ª©a chuong-
            if (chapterLinks.isEmpty()) {
                logger.warn("Kh√¥ng t√¨m th·∫•y link ch∆∞∆°ng n√†o t·∫°i ngu·ªìn: {}", baseUrl);
                return -1;
            }

            // Tr√≠ch ra s·ªë ch∆∞∆°ng t·ª´ t·ª´ng link, ch·ªçn ch∆∞∆°ng l·ªõn nh·∫•t
            return chapterLinks.stream()
                    .map(link -> extractChapterNumber(link.attr("href")))
                    .filter(num -> num > 0)
                    .max(Integer::compare)
                    .orElse(-1);

        } catch (IOException e) {
            logger.error("L·ªói khi k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω trang ngu·ªìn: {}", baseUrl, e);
            return -1;
        }
    }
    /**
     * Tr√≠ch xu·∫•t s·ªë ch∆∞∆°ng t·ª´ URL c√≥ d·∫°ng /chuong-123.html
     */
    private int extractChapterNumber(String href) {
        try {
            Pattern pattern = Pattern.compile("chuong-(\\d+)", Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(href);
            if (matcher.find()) {
                return Integer.parseInt(matcher.group(1)); // L·∫•y s·ªë ch∆∞∆°ng t·ª´ group(1)
            }
        } catch (Exception e) {
            logger.error("L·ªói khi tr√≠ch xu·∫•t s·ªë ch∆∞∆°ng t·ª´ href: {}", href, e);
        }
        return -1;
    }

    /**
     * ƒê·ªçc ch∆∞∆°ng cu·ªëi c√πng ƒë√£ l∆∞u t·ª´ file lastChapter.txt
     */
    private int loadLastKnownChapter() {
        if (!lastChapterFile.exists()) {
            logger.info("File l∆∞u lastKnownChapter kh√¥ng t·ªìn t·∫°i, b·∫Øt ƒë·∫ßu t·ª´ 0.");
            return 0;
        }
        try (BufferedReader reader = new BufferedReader(new FileReader(lastChapterFile))) {
            String line = reader.readLine();
            if (line != null) {
                int chapter = Integer.parseInt(line.trim());
                logger.info("ƒê√£ ƒë·ªçc lastKnownChapter t·ª´ file: {}", chapter);
                return chapter;
            }
        } catch (Exception e) {
            logger.error("L·ªói khi ƒë·ªçc lastKnownChapter t·ª´ file:", e);
        }
        return 0;
    }

    /**
     * C·∫≠p nh·∫≠t lastKnownChapter m·ªõi v√† ghi v√†o file
     */
    private void updateLastKnownChapter(int newChapter) {
        logger.info("C·∫≠p nh·∫≠t lastKnownChapter: {} -> {}", lastKnownChapter, newChapter);
        lastKnownChapter = newChapter;
        saveLastKnownChapter(newChapter);
    }

    /**
     * Ghi ch∆∞∆°ng cu·ªëi v√†o file lastChapter.txt
     */
    private void saveLastKnownChapter(int chapter) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(lastChapterFile, false))) {
            writer.write(String.valueOf(chapter));
            logger.info("ƒê√£ l∆∞u lastKnownChapter v√†o file: {}", chapter);
        } catch (IOException e) {
            logger.error("L·ªói khi l∆∞u lastKnownChapter v√†o file:", e);
        }
    }

    /**
     * Ki·ªÉm tra ch∆∞∆°ng ƒë√£ ƒë∆∞·ª£c l∆∞u file ch∆∞a v√† file c√≥ n·ªôi dung kh√¥ng
     */
    private boolean chapterFileExists(int chapter) {
        String dirPath = "luutrutruyen/" + storyName;
        File dir = new File(dirPath);
        if (!dir.exists()) {
            if (!dir.mkdirs()) {
                logger.error("Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: {}", dirPath);
            }
        }
        String filePath = dirPath + "/chuong-" + chapter + ".txt";
        File chapterFile = new File(filePath);
        boolean exists = chapterFile.exists() && chapterFile.length() > 0; // T·ªìn t·∫°i v√† kh√¥ng r·ªóng
        logger.debug("Ki·ªÉm tra ch∆∞∆°ng {}: filePath={}, t·ªìn t·∫°i v√† kh√¥ng r·ªóng = {}", chapter, filePath, exists);
        return exists;
    }
}
