package org.example.codechuyennoi.Workflow;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.example.codechuyennoi.Image.AiImageGenerator;
import org.example.codechuyennoi.Integation.MetadataCreator;
import org.example.codechuyennoi.Notification.ChapterMonitor;
import org.example.codechuyennoi.Notification.NotificationService;
import org.example.codechuyennoi.ProcessAudio.AudioGenerator;
import org.example.codechuyennoi.ProcessAudio.AudioProcessor;
import org.example.codechuyennoi.ProcessAudio.AudioStory;
import org.example.codechuyennoi.ProcessStory.Story;
import org.example.codechuyennoi.ProcessStory.StoryProcessor;
import org.example.codechuyennoi.ProcessVideo.VideoComposer;
import org.example.codechuyennoi.ProcessVideo.VideoMerger;
import org.example.codechuyennoi.ProcessVideo.VideoStory;
import org.example.codechuyennoi.Integation.YouTubeUploader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * ƒêi·ªÅu ph·ªëi to√†n b·ªô workflow t·ª± ƒë·ªông t·∫°o video k·ªÉ chuy·ªán t·ª´ ch∆∞∆°ng truy·ªán:
 * 1. Qu√©t ch∆∞∆°ng m·ªõi
 * 2. X·ª≠ l√Ω vƒÉn b·∫£n ‚Üí √¢m thanh ‚Üí ·∫£nh ‚Üí video
 * 3. T·∫£i l√™n YouTube
 * 4. G·ª≠i th√¥ng b√°o
 */
public class WorkflowCoordinator {
    private static final Logger logger = LoggerFactory.getLogger(WorkflowCoordinator.class);

    // C√°c th√†nh ph·∫ßn ch√≠nh x·ª≠ l√Ω trong pipeline
    private final StoryProcessor storyProcessor;
    private final AudioGenerator audioGenerator;
    private final AudioProcessor audioProcessor;
    private final AiImageGenerator aiImageGenerator;
    private final VideoComposer videoComposer;
    private final MetadataCreator metadataCreator;
    private final YouTubeUploader youTubeUploader;
    private final NotificationService notificationService;
    private final VideoMerger videoMerger;

    // H√†ng ƒë·ª£i ch∆∞∆°ng m·ªõi ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ ChapterMonitor
    private final BlockingQueue<Integer> chapterQueue = new LinkedBlockingQueue<>();
    private Thread monitorThread;

    // Th√¥ng tin c·∫•u h√¨nh c∆° b·∫£n
    private final String baseUrl;     // URL base ƒë·ªÉ t·∫£i ch∆∞∆°ng
    private final String storyName;   // T√™n truy·ªán ƒëang x·ª≠ l√Ω

    // Constructor kh·ªüi t·∫°o to√†n b·ªô th√†nh ph·∫ßn v√† b·∫Øt ƒë·∫ßu lu·ªìng qu√©t ch∆∞∆°ng m·ªõi
    public WorkflowCoordinator(Properties config, String storyName) {
        this.storyName = storyName;
        this.baseUrl = config.getProperty("story.base.url");

        // L·∫•y ƒë∆∞·ªùng d·∫´n c√¥ng c·ª• FFmpeg v√† th√¥ng tin OAuth YouTube
        String ffmpegPath = config.getProperty("ffmpeg.path");
        String ffprobePath = config.getProperty("ffprobe.path");
        String clientSecretPath = config.getProperty("google.oauth.client.secret.path");

        // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn x·ª≠ l√Ω
        this.storyProcessor = new StoryProcessor(config);
        this.audioGenerator = new AudioGenerator();
        this.audioProcessor = new AudioProcessor();
        this.aiImageGenerator = new AiImageGenerator();
        this.videoMerger = new VideoMerger(ffmpegPath);
        this.videoComposer = new VideoComposer(ffmpegPath, ffprobePath);
        this.metadataCreator = new MetadataCreator();
        this.youTubeUploader = new YouTubeUploader(clientSecretPath);
        this.notificationService = new NotificationService();

        // Kh·ªüi ƒë·ªông ti·∫øn tr√¨nh theo d√µi ch∆∞∆°ng m·ªõi v√† x·ª≠ l√Ω khi ph√°t hi·ªán
        startChapterMonitoring(config);
        processNewChapters();
    }

    // X·ª≠ l√Ω batch ch∆∞∆°ng t·ª´ start ƒë·∫øn end v√† ch·ªâ t·∫£i video t·ªïng h·ª£p cu·ªëi c√πng
    public void processMultipleChapters(int startChapter, int endChapter) {
        logger.info("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω batch ch∆∞∆°ng t·ª´ {} ƒë·∫øn {} v·ªõi base URL: {}", startChapter, endChapter, baseUrl);
        try {
            List<Story> processedStories = storyProcessor.processChaptersInBatch(storyName, baseUrl, startChapter, endChapter);

            for (Story story : processedStories) {
               AudioStory audioStory = generateAudio(story);//t·∫°o audio
               VideoStory chapterVideo = composeVideo(story, audioStory);//t·∫°o video t·ª´ng ch∆∞∆°ng
            }

            // G·ªôp v√† t·∫£i l√™n ch·ªâ khi c√≥ nhi·ªÅu h∆°n m·ªôt ch∆∞∆°ng
            int numberOfChapters = endChapter - startChapter + 1;
            if (numberOfChapters <= 1) {
                logger.warn("‚ö†Ô∏è Ch·ªâ c√≥ {} ch∆∞∆°ng ƒë∆∞·ª£c x·ª≠ l√Ω, b·ªè qua b∆∞·ªõc g·ªôp v√† upload YouTube.", numberOfChapters);
                return;
            }
            // G·ªôp video th√†nh  m·ªôt video full ch∆∞a t·∫•t c·∫£ ch∆∞∆°ng
            VideoStory fullVideo = mergeAllChapterVideos(storyName, startChapter, endChapter);
            String youtubeId = uploadToYouTube(fullVideo);//upload l√™n yt
            sendSuccessNotification(youtubeId);

        } catch (Exception e) {
            logger.error("L·ªói nghi√™m tr·ªçng trong quy tr√¨nh batch: {}", e.getMessage(), e);
            notifyFailure("L·ªói h·ªá th·ªëng trong quy tr√¨nh batch: " + e.getMessage());
        }
        logger.info("Ho√†n th√†nh x·ª≠ l√Ω batch ch∆∞∆°ng.");
    }

    // X·ª≠ l√Ω sinh √¢m thanh t·ª´ n·ªôi dung c√¢u chuy·ªán.
    private AudioStory generateAudio(Story story) {
        AudioStory audioStory = audioGenerator.generateAudio(storyName, story.getChapterNumber(), story.getProcessedText());
        return audioProcessor.processAudio(audioStory);
    }

    // T·∫°o video t·ª´ ·∫£nh + audio + metadata.
    private VideoStory composeVideo(Story story, AudioStory audioStory) {
        List<String> prompts = story.getSentences();
        List<String> imagePaths = aiImageGenerator.generateImages(prompts);
        String title = "Chuy·ªán c·ªï t√≠ch - Ch∆∞∆°ng " + story.getChapterNumber();
        String description = "A Phi√™u C√¥ N∆∞∆°ng - Ch∆∞∆°ng " + story.getChapterNumber();

        VideoStory chapterVideo = videoComposer.composeVideo(story, audioStory, imagePaths, title, description);
        if (chapterVideo == null) {
            logger.error("‚ùå T·∫°o video ch∆∞∆°ng th·∫•t b·∫°i cho ch∆∞∆°ng s·ªë: {}", story.getChapterNumber());
            return null;
        }
        logger.info("‚úÖ ƒê√£ t·∫°o video ch∆∞∆°ng {}: {}", story.getChapterNumber(), chapterVideo.getDescription());
        return chapterVideo;
    }

    private VideoStory mergeAllChapterVideos(String storyName, int startChapter, int endChapter) {
        String storyFolderName = "video_" + storyName.toLowerCase().replaceAll("[^a-z0-9]+", "_").replaceAll("^_+|_+$", "");
        String storyFolder = "output/" + storyFolderName;

        File folder = new File(storyFolder);
        if (!folder.exists() || !folder.isDirectory()) {
            logger.error("‚ùå Th∆∞ m·ª•c ch·ª©a video ch∆∞∆°ng kh√¥ng t·ªìn t·∫°i: {}", storyFolder);
            return null;
        }

        File[] videoFiles = folder.listFiles((dir, name) -> name.matches("video_chuong_\\d+\\.mp4"));
        if (videoFiles == null || videoFiles.length == 0) {
            logger.error("‚ùå Kh√¥ng t√¨m th·∫•y file video ch∆∞∆°ng ƒë·ªÉ g·ªôp trong th∆∞ m·ª•c: {}", storyFolder);
            return null;
        }

        logger.info("üîÑ G·ªôp {} video ch∆∞∆°ng trong th∆∞ m·ª•c: {}", videoFiles.length, storyFolder);
        String fullVideoPath = videoMerger.mergeVideos(storyFolder);
        if (fullVideoPath == null) {
            logger.error("‚ùå G·ªôp video ch∆∞∆°ng th·∫•t b·∫°i.");
            return null;
        }

        logger.info("‚úÖ ƒê√£ g·ªôp video t·ªïng h·ª£p: {}", fullVideoPath);
        String title = "Chuy·ªán c·ªï t√≠ch - " + storyName + " (Ch∆∞∆°ng " + startChapter + (startChapter == endChapter ? "" : "-" + endChapter) + ")";
        String description = "A Phi√™u C√¥ N∆∞∆°ng - Truy·ªán t·ª´ ch∆∞∆°ng " + startChapter + (startChapter == endChapter ? "" : " ƒë·∫øn " + endChapter) + ".";
        return new VideoStory(fullVideoPath, title, description, null, null, null, null);
    }

    // T·∫£i video l√™n YouTube.
    private String uploadToYouTube(VideoStory videoStory) throws IOException {
        String metadata = metadataCreator.createMetadata(videoStory.getTitle(), videoStory.getDescription());
        return youTubeUploader.uploadVideo(videoStory, metadata);
    }

    // G·ª≠i th√¥ng b√°o khi x·ª≠ l√Ω th√†nh c√¥ng m·ªôt ch∆∞∆°ng ho·∫∑c video.
    private void sendSuccessNotification(String youtubeId) {
        if (youtubeId != null) {
            notificationService.sendCompletionNotification(true, "Quy tr√¨nh ho√†n th√†nh, YouTube ID: " + youtubeId);
        } else {
            logger.warn("Kh√¥ng g·ª≠i th√¥ng b√°o th√†nh c√¥ng v√¨ YouTube ID l√† null");
        }
    }

    // G·ª≠i th√¥ng b√°o khi x·∫£y ra l·ªói nghi√™m tr·ªçng.
    private void notifyFailure(String message) {
        logger.error("Th√¥ng b√°o th·∫•t b·∫°i: {}", message);
        notificationService.sendCompletionNotification(false, message);
    }

    // Kh·ªüi ƒë·ªông lu·ªìng theo d√µi ch∆∞∆°ng m·ªõi (gi√°m s√°t file ho·∫∑c API).
    private void startChapterMonitoring(Properties config) {
        String lastChapterFilePath = config.getProperty("last.chapter.file", "lastChapter.txt");
        ChapterMonitor monitor = new ChapterMonitor(chapterQueue, baseUrl, lastChapterFilePath, storyName);
        monitorThread = new Thread(monitor);
        monitorThread.start();
        logger.info("ChapterMonitor ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.");
    }

    // Lu·ªìng x·ª≠ l√Ω ch∆∞∆°ng m·ªõi t·ª´ h√†ng ƒë·ª£i (ƒë∆∞·ª£c ƒë·∫©y v√†o b·ªüi ChapterMonitor).
    private void processNewChapters() {
        Set<Integer> processedChapters = new HashSet<>();
        List<Integer> chaptersToProcess = new ArrayList<>();
        long timeoutSeconds = 60; // Th·ªùi gian ch·ªù t·ªëi ƒëa (gi√¢y)

        while (!Thread.currentThread().isInterrupted()) {
            try {
                // Thu th·∫≠p t·∫•t c·∫£ ch∆∞∆°ng c√≥ s·∫µn
                chapterQueue.drainTo(chaptersToProcess);
                Integer chapter = chapterQueue.poll(timeoutSeconds, TimeUnit.SECONDS);
                if (chapter != null) {
                    chaptersToProcess.add(chapter);
                }

                // Lo·∫°i b·ªè ch∆∞∆°ng tr√πng l·∫∑p
                chaptersToProcess.removeIf(processedChapters::contains);
                processedChapters.addAll(chaptersToProcess);

                // X·ª≠ l√Ω n·∫øu c√≥ ch∆∞∆°ng
                if (!chaptersToProcess.isEmpty()) {
                    int startChapter = chaptersToProcess.stream().min(Integer::compareTo).orElse(chaptersToProcess.get(0));
                    int endChapter = chaptersToProcess.stream().max(Integer::compareTo).orElse(chaptersToProcess.get(0));
                    logger.info("X·ª≠ l√Ω batch ch∆∞∆°ng t·ª´ {} ƒë·∫øn {} (t·ªïng: {} ch∆∞∆°ng)", startChapter, endChapter, chaptersToProcess.size());
                    processMultipleChapters(startChapter, endChapter);
                    chaptersToProcess.clear();
                }
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            } catch (Exception e) {
                logger.error("L·ªói khi x·ª≠ l√Ω ch∆∞∆°ng m·ªõi: {}", e.getMessage(), e);
                notifyFailure("L·ªói x·ª≠ l√Ω ch∆∞∆°ng m·ªõi: " + e.getMessage());
            }
        }
    }
}
