package org.example.codechuyennoi.ProcessingSubtitle;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

@Service
public class AutoGeneratedSubtitleProvider implements SubtitleLineProvider {
    private static final Logger logger = LoggerFactory.getLogger(AutoGeneratedSubtitleProvider.class);

    private final AudioDurationExtractor audioDurationExtractor;

    @Autowired
    public AutoGeneratedSubtitleProvider(AudioDurationExtractor audioDurationExtractor) {
        this.audioDurationExtractor = audioDurationExtractor;
    }

    @Override
    public List<SubtitleLine> getLinesForChapter(String storyName, int chapterNumber) {
        String normalizedStoryName = storyName.toLowerCase()
                .replaceAll("[^a-z0-9]+", "-")
                .replaceAll("-+", "-")
                .trim();

        String subtitlePath = String.format("luutrutruyen/%s/chuong_%d.txt", normalizedStoryName, chapterNumber);
        Path filePath = Paths.get(subtitlePath).toAbsolutePath();

        logger.info("Đường dẫn phụ đề: {}", filePath);

        try {
            Files.createDirectories(filePath.getParent());
        } catch (IOException e) {
            logger.error("Lỗi tạo thư mục phụ đề: {}", e.getMessage());
            return new ArrayList<>();
        }

        if (!Files.exists(filePath)) {
            logger.warn("Không tìm thấy file phụ đề: {}", filePath);
            return new ArrayList<>();
        }

        try {
            List<String> lines = Files.readAllLines(filePath);
            logger.info("Đọc được {} dòng phụ đề", lines.size());

            // Lấy đường dẫn tới audio tương ứng
            String audioPath = String.format("luutrutruyen/%s/chuong_%d.mp3", normalizedStoryName, chapterNumber);
            double audioDuration = audioDurationExtractor.getAudioDuration(audioPath);
            logger.info("Thời lượng audio chương {}: {} giây", chapterNumber, audioDuration);

            return convertToSubtitleLines(lines, audioDuration);
        } catch (IOException e) {
            logger.error("Lỗi đọc file phụ đề: {}", e.getMessage());
            return new ArrayList<>();
        }
    }

    private List<SubtitleLine> convertToSubtitleLines(List<String> lines, double totalDuration) {
        List<SubtitleLine> subtitleLines = new ArrayList<>();

        // Xử lý định dạng SRT
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i).trim();
            if (line.matches("\\d+")) {
                if (i + 1 < lines.size()) {
                    String timeLine = lines.get(++i).trim();
                    if (timeLine.matches("\\d{2}:\\d{2}:\\d{2},\\d{3} --> \\d{2}:\\d{2}:\\d{2},\\d{3}")) {
                        String[] times = timeLine.split(" --> ");
                        StringBuilder text = new StringBuilder();
                        while (i + 1 < lines.size() && !lines.get(i + 1).trim().matches("\\d+")) {
                            text.append(lines.get(++i).trim()).append(" ");
                        }
                        if (!text.toString().trim().isEmpty()) {
                            double start = parseSrtTime(times[0]);
                            double end = parseSrtTime(times[1]);
                            subtitleLines.add(new SubtitleLine(text.toString().trim(), start, end)); // ✅ Sửa thứ tự
                        }
                    }
                }
            }
        }

        // Nếu không phải định dạng SRT, chia đều theo thời lượng
        if (subtitleLines.isEmpty()) {
            double durationPerLine = (lines.size() > 0 && totalDuration > 0)
                    ? totalDuration / lines.size()
                    : 5.0;

            double currentTime = 0.0;
            for (String line : lines) {
                if (!line.trim().isEmpty()) {
                    subtitleLines.add(new SubtitleLine(line.trim(), currentTime, currentTime + durationPerLine)); // ✅ Sửa thứ tự
                    currentTime += durationPerLine;
                }
            }
        }

        return subtitleLines;
    }

    private double parseSrtTime(String srtTime) {
        String[] parts = srtTime.replace(",", ":").split(":");
        int hours = Integer.parseInt(parts[0]);
        int minutes = Integer.parseInt(parts[1]);
        int seconds = Integer.parseInt(parts[2]);
        int milliseconds = Integer.parseInt(parts[3]);
        return hours * 3600.0 + minutes * 60.0 + seconds + milliseconds / 1000.0;
    }
}
